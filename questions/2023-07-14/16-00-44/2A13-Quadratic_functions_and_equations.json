{
    "MQCode": "2A13",
    "learning_objective": "Use an iterative process to plan the development of a program by including others' perspectives and considering user preferences.",
    "interest_area": "Math",
    "topic": "Quadratic functions and equations",
    "coding": true,
    "question_str": "{\n    \"Question\": \"River is working on a program to solve quadratic equations. They have written the following code snippet:River wants to improve their program design by incorporating feedback from their classmates. Which functionality should River add to their program to make it more user-friendly?\",\n    \"Answer1\": \"Allow the user to input the coefficients of the quadratic equation.\",\n    \"Answer2\": \"Display the graph of the quadratic equation.\",\n    \"Answer3\": \"Output the steps to solve the quadratic equation.\",\n    \"Answer4\": \"Provide an option to solve quadratic equations with complex roots.\",\n    \"CorrectAnswer\": \"1\",\n    \"Explanation\": \"By allowing the user to input the coefficients of the quadratic equation, the program becomes more user-friendly as it can handle a wide range of quadratic equations. This allows users to solve specific equations of their choice rather than being limited to a fixed equation.\",\n    \"code_snippet\": \"quorum real a = 1\\nquorum real b = -2\\nquorum real c = -3\\nquorum real x1 = 0\\nquorum real x2 = 0\\n\\naction solveQuadraticEquation()\\n    real discriminant = b * b - 4 * a * c\\n    if discriminant > 0 then\\n        x1 = (-b + sqrt(discriminant)) / (2 * a)\\n        x2 = (-b - sqrt(discriminant)) / (2 * a)\\n        output \\\"The solutions are: \\\" + toString(x1) + \\\" and \\\" + toString(x2)\\n    elseif discriminant == 0 then\\n        x1 = -b / (2 * a)\\n        output \\\"The solution is: \\\" + toString(x1)\\n    else\\n        real realPart = -b / (2 * a)\\n        real imaginaryPart = sqrt(abs(discriminant)) / (2 * a)\\n        output \\\"The solutions are: \\\" + toString(realPart) + \\\"+\\\" + toString(imaginaryPart) + \\\"i and \\\" + toString(realPart) + \\\"-\\\" + toString(imaginaryPart) + \\\"i\\\"\\n    end\\nend\"\n}"
}