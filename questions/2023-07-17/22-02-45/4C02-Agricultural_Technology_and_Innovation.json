{
    "MQCode": "4C02",
    "learning_objective": "Compare levels of abstraction and interactions between application software, system software, and hardware layers.",
    "interest_area": "Agriculture",
    "topic": "Agricultural Technology and Innovation",
    "coding": true,
    "question_str": "{\n    \"Question\": \"Quinn is working on a smart farming system where they program the computer to control the temperature of a greenhouse. The temperature sensor sends readings to the computer system which then adjusts the temperature as needed based on the following code:What part of the system does each layer of the code represent in the idea of abstraction in computer systems?\",\n    \"Answer1\": \"The code itself is the application software, the computer system that runs it is the system software, and the temperature sensor is the hardware\",\n    \"Answer2\": \"The temperature sensor is the application software, the computer system is the system software and the code is the hardware\",\n    \"Answer3\": \"The code and the computer system make up the application software and the temperature sensor is the system software\",\n    \"Answer4\": \"The temperature sensor and code represent the system software, and the computer system is the application software\",\n    \"CorrectAnswer\": \"1\",\n    \"Explanation\": \"In this scenario, the temperature sensor is part of the hardware because it's a physical device which provides input to the system. The code that controls the greenhouse temperature is the application software because it's a program created by a user (Quinn) for a specific task. Lastly, the computer system that the code runs on represents the system software because it manages and controls hardware (like the temperature sensor) and software resources.\",\n    \"code_snippet\": \"boolean temperatureSensorIsActive\\ntext desiredTemperature\\ndesiredTemperature = input(\\\"What is the desired temperature?\\\")\\nwhile temperatureSensorIsActive\\ntext actualTemperature = getTemperatureFromSensor()\\nif actualTemperature < desiredTemperature \\n    increaseTemperature()\\nelse if actualTemperature > desiredTemperature \\n    decreaseTemperature()\\nelse\\n    maintainTemperature()\\nend\\nend\"\n}"
}