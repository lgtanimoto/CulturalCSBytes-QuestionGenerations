{
    "MQCode": "3A11",
    "learning_objective": "Create clearly named variables that represent different data types and perform operations on their values.",
    "interest_area": "Everyday Life",
    "topic": "Meal Planning and Grocery Shopping",
    "coding": false,
    "question_str": "{\n    \"Question\": \"Alex is in charge of planning meals and grocery shopping for their family for a week. They plan to cook Italian on Monday, Wednesday, and Friday, and Japanese on Tuesday, Thursday, and Saturday. On Sunday, they rest. They have $200 set aside for groceries. Assuming Italian meals cost $30 each and Japanese meals cost $20 each, write a pseudocode for Alex to calculate how much money they will have left after grocery shopping for the week. Remember to create clearly named variables that represent different data types and perform operations on their values.\",\n    \"Answer1\": \"grocery budget = 200\\nItalian meals cost = 30\\nJapanese meals cost = 20\\nTotal Italian = Italian meals cost * 3\\nTotal Japanese = Japanese meals cost * 3\\nRemaining funds = grocery budget - (Total Italian + Total Japanese)\",\n    \"Answer2\": \"budget = 200\\nItalian cost = 30\\nJapanese cost = 20\\nTotal Meals = (Italian cost * 3) + (Japanese cost * 3)\\nLeftover = budget - Total Meals\",\n    \"Answer3\": \"total budget = 200\\nItalian meals = 30\\nJapanese meals = 20\\nTotal cost = Italian meals * 3 + Japanese meals * 3\\nMoney left = total budget - Total cost\",\n    \"Answer4\": \"budget_for_grocery = 200\\nitalian_meal_cost = 30\\njapanese_meal_cost = 20\\ncost_for_Italian = italian_meal_cost * 3\\ncost_for_Japanese = japanese_meal_cost * 3\\nremaining_money = budget_for_grocery - (cost_for_Italian + cost_for_Japanese)\",\n    \"CorrectAnswer\": \"4\",\n    \"Explanation\": \"In creating variables, one has to choose names that clearly represent the data they hold. In the correct answer, variables are named in a more specific way: 'budget_for_grocery' instead of just 'budget', and 'remaining_money' instead of just 'leftover'. Also, the naming convention used (lowercase letters separated by underscores) makes the code easier to read.\"\n}"
}