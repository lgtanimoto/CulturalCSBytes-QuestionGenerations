{
    "MQCode": "4C01",
    "learning_objective": "Explain how abstractions hide the underlying implementation details of computing systems embedded in everyday objects.",
    "interest_area": "Everyday Life",
    "topic": "Sleep and Restorative Practices",
    "coding": true,
    "question_str": "{\n    \"Question\": \"Alex is an aspiring programmer and a wellness enthusiast. They have heard a lot about smart sleep monitors and their benefits in ensuring a good night's sleep. It fascinates them how effortlessly their smart sleep monitor collects raw bio-signals, processes it, and presents comprehensible data on deep sleep, REM sleep, and awake time. Alex wants to delve into how these sleep monitors work on a fundamental level. They read a piece of pseudo-code that describes the basic operation of these devices. The code block is as follows. How does code abstraction hide the complex layers beneath this simple block of code?\",\n    \"Answer1\": \"It hides how the signals are interpreted and differentiated as deep sleep, REM sleep, and awake time.\",\n    \"Answer2\": \"It secretive the way the monitor collects the bio-signals from the body.\",\n    \"Answer3\": \"It masks how the time spent in each sleep phase is calculated.\",\n    \"Answer4\": \"All of the above\",\n    \"CorrectAnswer\": \"4\",\n    \"Explanation\": \"Code abstractions help to simplify complex problems by concealing lower-level details. In this case, how bio-signals are collected, interpreted and processed into user-understandable data are all concealed, allowing the user to simply see an abstracted version of their sleep patterns.\",\n    \"code_snippet\": \"action CollectSleepData()\\n    integer deepSleep = monitor.DeepSleep()\\n    integer REMSleep = monitor.REMSleep()\\n    integer awakeTime = monitor.AwakeTime()\\n    output \\\"You have spent\\\" + deepSleep + \\\"hours in deep sleep, \\\" + REMSleep + \\\"hours in REM sleep, and \\\" + awakeTime + \\\"hours awake.\\\"\\nend\"\n}"
}