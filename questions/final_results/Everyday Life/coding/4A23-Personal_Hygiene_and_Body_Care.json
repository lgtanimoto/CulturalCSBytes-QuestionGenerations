{
    "MQCode": "4A23",
    "learning_objective": "Document design decisions using text, graphics, presentations, and/or demonstrations in the development of complex programs.",
    "interest_area": "Everyday Life",
    "topic": "Personal Hygiene and Body Care",
    "coding": true,
    "question_str": "{\n    \"Question\": \"Alex created a complex program to remind them of their personal hygiene schedule that includes activities like tooth brushing, taking a shower, changing clothes and so on. Every so often, they forget which activity they need to do next, which causes them to neglect one of them. The program also allows them to add, remove, or change the time of particular tasks. However, their friends who tried using the program often got confused about how it works. To make the program user-friendly, what should Alex focus on?\",\n    \"Answer1\": \"Alex should ignore their friends' confusion because the program was made for personal use.\",\n    \"Answer2\": \"Alex should change the code of the program randomly and hope it will become more user-friendly.\",\n    \"Answer3\": \"Alex should start documenting their design decisions using text, graphics, presentations, and demonstrations to help users understand how to interact with the program.\",\n    \"Answer4\": \"Alex should quit using computers and revert to tracking tasks on paper.\",\n    \"CorrectAnswer\": \"3\",\n    \"Explanation\": \"Documentation is a key part of the program development process. It helps users understand how to interact with the program and how the program works. Alex should document the design decisions and provide thorough instructions to help the users.\",\n    \"code_snippet\": \"class PersonalHygiene\\n    action Main\\n        // a list of tasks\\n        Text[] tasks = [\\\"Brush Teeth\\\", \\\"Take Shower\\\", \\\"Change Clothes\\\"]\\n        integer nextTask = 0\\n\\n        // a snippet of the execution loop\\n        while true\\n           if time() == tasks[nextTask]'s time then\\n                output tasks[nextTask]\\n                nextTask = nextTask + 1\\n                if nextTask >= tasks:length then\\n                    nextTask = 0\\n                end\\n            end\\n        end\\n    end\\nend\"\n}"
}