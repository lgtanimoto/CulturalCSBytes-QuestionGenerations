{
    "MQCode": "2A08",
    "learning_objective": "Compare and refine multiple algorithms for the same task and determine which is the most appropriate.",
    "interest_area": "Sports and Athletics",
    "topic": "Track and Field/Cross Country",
    "coding": true,
    "question_str": "{\n    \"Question\": \"Alex, a cross country runner, is writing a program to help them keep track of their individual race times in seconds. Alex wants to write a function to find their fastest (minimum) race time. They have two different algorithms in mind and is unsure about which one to use. Algorithm1 puts all the times into an array and sorts it, then returns the first value. Algorithm2 uses a loop to find the minimum value without sorting. Which algorithm should Alex use and why?\",\n    \"Answer1\": \"Algorithm1 because sorting the array first will make it easier to find the minimum value.\",\n    \"Answer2\": \"Algorithm2 because using a loop to find the minimum value without sorting will be faster and more efficient.\",\n    \"Answer3\": \"Both algorithms are equally efficient and Alex can choose either.\",\n    \"Answer4\": \"Neither algorithm will work as Alex needs to use a database to store the race times.\",\n    \"CorrectAnswer\": \"2\",\n    \"Explanation\": \"Algorithm2 is more efficient because it goes through the array of race times only once, so the time complexity is O(n). Algorithm1, on the other hand, needs to sort the array first, which takes more time (O(n log n) for efficient sorting algorithms), then access the first element, which makes it less efficient than Algorithm2.\",\n    \"code_snippet\": \"Algorithm1\\nclass Main\\n    action Main\\n        Array<number> raceTimes\\n        raceTimes:Add(120)\\n        raceTimes:Add(113)\\n        raceTimes:Add(109)\\n        Sort(raceTimes, 0, raceTimes:GetSize()-1)\\n        output raceTimes:At(0)\\n    end\\nend\\n\\nAlgorithm2\\nclass Main\\n    action Main\\n        Array<number> raceTimes\\n        raceTimes:Add(120)\\n        raceTimes:Add(113)\\n        raceTimes:Add(109)\\n        number minTime = raceTimes:At(0)\\n        repeat i = 1 to raceTimes:GetSize() - 1\\n            if raceTimes:At(i) < minTime\\n                minTime = raceTimes:At(i)\\n            end\\n        end\\n        output minTime\\n    end\\nend\"\n}"
}