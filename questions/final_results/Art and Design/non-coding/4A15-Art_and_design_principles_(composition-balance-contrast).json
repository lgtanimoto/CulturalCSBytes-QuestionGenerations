{
    "MQCode": "4A15",
    "learning_objective": "Justify the selection of specific control structures when tradeoffs involve implementation, readability, and program performance, and explain the benefits and drawbacks of choices made.",
    "interest_area": "Art and Design",
    "topic": "Art and design principles (composition, balance, contrast)",
    "coding": false,
    "question_str": "{\n    \"Question\": \"Alex is creating a digital art program in which users can drag and drop different sized and colored shapes to create artwork. The program needs a functionality to let users know if their art composition is balanced or not. Alex has two ways to implement this: \\n\\n1. A loop that compares each shape's size and color with the rest of the shapes every time one is added or removed.\\n\\n2. Using an Array which stores the information about each shape's size and color, and carrying out summations in the Array whenever a shape is added or removed.\\n\\nBased on efficient code performance, readability, and implementation, which should Alex choose?\",\n    \"Answer1\": \"Method 1: A loop to compare each shape's size and color.\",\n    \"Answer2\": \"Method 2: Using an Array which stores the information.\",\n    \"Answer3\": \"Both methods will result in the same performance and readability.\",\n    \"Answer4\": \"It is not possible to determine which method is more suitable without more information.\",\n    \"CorrectAnswer\": \"2\",\n    \"Explanation\": \"Method 2 seems more efficient and structured. While it may be a bit more complex to initially set up, it avoids the need for continuous comparison every time a shape is added or removed, thus improving overall performance. Additionally, this approach has a solid data structure (Arrays), which increases readability and simplifies implementation, compared to the looping comparison in Method 1.\"\n}"
}