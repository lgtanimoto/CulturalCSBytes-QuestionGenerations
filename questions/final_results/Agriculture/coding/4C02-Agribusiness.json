{
    "MQCode": "4C02",
    "learning_objective": "Compare levels of abstraction and interactions between application software, system software, and hardware layers.",
    "interest_area": "Agriculture",
    "topic": "Agribusiness",
    "coding": true,
    "question_str": "{\n    \"Question\": \"Alex is designing a system to automate irrigation in their family's farm based on weather forecasts and soil moisture levels. Which hardware-software interactions should Alex consider in their design to achieve the needed functionality?\",\n    \"Answer1\": \"Only consider the application software layer, that is, the irrigation system with a customized user interface.\",\n    \"Answer2\": \"Only consider the system software layer, that is, the operating system and bootloader firmware on the farm's computers.\",\n    \"Answer3\": \"Only consider the hardware layer, that is, the moisture sensors, irrigation mechanisms, and computer hard drive.\",\n    \"Answer4\": \"Consider all layers: application software (irrigation system), system software (operating system and driver for the moisture sensor), and hardware (moisture sensors, irrigation system, and computer).\",\n    \"CorrectAnswer\": \"4\",\n    \"Explanation\": \"The automation of the irrigation system involves all levels of abstraction: application software (for user interface and logic of the irrigation system), system software (to interface with the hardware, controlling sensor reading and activating irrigation), and hardware (the actual physical devices doing the sensing and watering).\",\n    \"code_snippet\": \"number moistureLevel\\naction Start()\\n    hardwareInterface = HardwareInterface()\\n    while hardwareInterface.IsRunning()\\n        moistureLevel = hardwareInterface.GetMoistureLevel()\\n        if moistureLevel < Threshold\\n            hardwareInterface.ActivateIrrigationSystem()\\n        end\\n    end\\nend\"\n}"
}